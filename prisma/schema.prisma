// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  walletAddress String?   @unique
  role          UserRole?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  courses Course[] @relation("CourseInstructor")
  enrollments Enrollment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoLink   String?
  price       Decimal  @default(0) // Price in SOL or tokens
  instructorId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  instructor User @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  quizQuestions QuizQuestion[]
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())
  paidAmount Decimal @default(0) // Amount paid for the course
  status    EnrollmentStatus @default(ACTIVE)
  quizScore Int?    // Quiz score (number of correct answers)
  quizAnswers Json? // Store quiz answers as JSON
  completedAt DateTime? // When the course was completed

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model QuizQuestion {
  id           String   @id @default(cuid())
  courseId     String
  question     String
  options      String[] // Array of 4 options
  correctAnswer Int     // Index of correct option (0-3)
  createdAt    DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum UserRole {
  STUDENT
  EDUCATOR
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
